<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- bean 标签：用于配置让 spring 创建对象，并且存入 ioc 容器之中
        id 属性：对象的唯一标识
        class 属性：指定要创建对象的全限定类名
    -->
    <!-- 配置 service -->
    <!--<bean id="accountService" class="com.ysdrzp.service.impl.AccountServiceImpl"></bean>-->

    <!-- 配置 dao -->
    <!--<bean id="accountDao" class="com.ysdrzp.dao.impl.AccountDaoImpl"></bean>-->

    <!--在默认情况下：它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败。-->
    <!--<bean id="accountService" class="com.ysdrzp.service.impl.AccountServiceImpl"/>-->

    <!-- 此种方式是: 使用 StaticFactory 类中的静态方法 createAccountService 创建对象，并存入 spring 容器
        id 属性：指定 bean 的 id，用于从容器中获取
        class 属性：指定静态工厂的全限定类名
        factory-method 属性：指定生产对象的静态方法
    -->
    <!--<bean id="accountService" class="com.ysdrzp.factory.StaticFactory" factory-method="createAccountService"></bean>-->

    <!-- 此种方式是：先把工厂的创建交给 spring 来管理，然后在使用工厂的 bean 来调用里面的方法
        factory-bean 属性：用于指定实例工厂 bean 的 id。
        factory-method 属性：用于指定实例工厂中创建对象的方法。
    -->
    <!--<bean id="instanceFactory" class="com.ysdrzp.factory.InstanceFactory"></bean>-->
    <!--<bean id="accountService" factory-bean="instanceFactory" factory-method="createAccountService"></bean>-->

    <!-- 使用构造函数的方式，给 service 中的属性传值  要求：类中需要提供一个对应参数列表的构造函数。
    涉及的标签：constructor-arg
    属性：
        index:指定参数在构造函数参数列表的索引位置
        type:指定参数在构造函数中的数据类型
        name:指定参数在构造函数中的名称,用这个找给谁赋值
        =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============
        value:它能赋的值是基本数据类型和 String 类型
        ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean
    -->
    <!--<bean id="accountService" class="com.ysdrzp.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="张三"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <bean id="now" class="java.util.Date"></bean>-->

    <!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式
    涉及的标签：property
    属性：
        name：找的是类中 set 方法后面的部分
        ref：给属性赋值是其他 bean 类型的
        value：给属性赋值是基本数据类型和 string 类型的
    实际开发中，此种方式用的较多。
    -->
    <!--<bean id="accountService" class="com.ysdrzp.service.impl.AccountServiceImpl">
        <property name="name" value="test"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>
    <bean id="now" class="java.util.Date"></bean>-->

    <!--<bean id="accountService" class="com.ysdrzp.service.impl.AccountServiceImpl"
          p:name="test" p:age="21" p:birthday-ref="now"/>
    <bean id="now" class="java.util.Date"></bean>-->

    <!-- 注入集合数据
        List 结构的：array,list,set
        Map 结构的: map,entry,props,prop
    -->
    <!--<bean id="myCollection" class="com.ysdrzp.collection.MyCollection">
        &lt;!&ndash; 在注入集合数据时，只要结构相同，标签可以互换 &ndash;&gt;
        &lt;!&ndash; 给数组注入数据 &ndash;&gt;
        <property name="myStrs">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>
        &lt;!&ndash; 注入 list 集合数据 &ndash;&gt;
        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        &lt;!&ndash; 注入 set 集合数据 &ndash;&gt;
        <property name="mySet">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
        &lt;!&ndash; 注入 Map 数据 &ndash;&gt;
        <property name="myMap">
            <props>
                <prop key="testA">aaa</prop>
                <prop key="testB">bbb</prop>
            </props>
        </property>
        &lt;!&ndash; 注入 properties 数据 &ndash;&gt;
        <property name="myProps">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>bbb</value>
                </entry>
            </map>
        </property>
    </bean>-->

    <!-- 配置 service -->
    <!--<bean id="accountService" class="com.ysdrzp.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>-->

    <!-- 配置 dao -->
    <!--<bean id="accountDao" class="com.ysdrzp.dao.impl.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"></property>
    </bean>-->

    <!-- 告知 spring 创建容器时要扫描的包 -->
    <context:component-scan base-package="com.ysdrzp" />

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/spring?characterEncoding=UTF-8"></property>
        <property name="user" value="root"></property>
        <property name="password" value="root"></property>
    </bean>

</beans>